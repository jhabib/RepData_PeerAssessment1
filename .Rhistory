xmlName(rootNode)
source('~/R/PA1/getXML.R')
source('~/R/PA1/getXML.R')
source('~/R/PA1/getXML.R')
source('~/R/PA1/getXML.R')
rootNode
names(rootNode)
source('~/R/PA1/getXML.R')
xmlName(rootNode)
names(rootNode)
source('~/R/PA1/getXML.R')
source('~/R/PA1/getXML.R')
names(rootNode)
xmlName(rootNode)
head(doc)
head(myDoc)
names(myDoc)
xmlName(myDoc)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
xmlSApply(rootNode,zipcode)
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//name"[2:20],xmlValue)
xpathSApply(rootNode,"//name",xmlValue)[1:10]
xpathSApply(rootNode,"//zipcode",xmlValue)[1:10]
xpathSApply(rootNode,"//li[@class='zipcode']",xmlValue)[1:10]
xpathSApply(rootNode,"//li[@zipcode='21231']",xmlValue)[1:10]
xpathSApply(rootNode,"//zipcode='21231'",xmlValue)[1:10]
xpathSApply(rootNode,"//zipcode='21231'",xmlValue)
xpathSApply(rootNode,"//li[@zipcode='21231']",xmlValue)
xpathSApply(rootNode,"//li[@class='zipcode']",xmlValue)
xpathSApply(rootNode,"//li[@zipcode='21231']",xmlValue)
myZip <- xpathSApply(rootNode,"//li[@zipcode='21231']",xmlValue)
print(myZip)
for (obj in myZip()) {print(get(obj))}
myZip
for (obj in myZip {print(get(obj))}
print(get(myZip))
length(myZip)
myZip <- xpathSApply(rootNode,"//@zipcode='21231'",xmlValue)
print(myZip)
class(myZip)
myDataFrame <- xmlToDataFrame(myDoc)
head(myDataFrame)
head(myDataFrame[1:6])
myData <- xmlToDataFrame(myUrl)
head(myData)
head(myData)[1:7]
rm(list=ls())
ls()
library(XML)
myUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
myDoc <- xmlTreeParse(myUrl, useInternalNodes=TRUE)
top <- xmlRoot(myDoc)
xmlName(top)
names(top)
xmlValue(top[[1]])
xmlValue(top[["zipcode"]])
xmlValue(top[[3]])
xmlAttrs(top[[3]][[1]])
xmlAttrs(top[[1]][[1]])
xpathSApply(myDoc, "/zipcode", xmlValue)
xpathSApply(myDoc, "//zipcode", xmlValue)
myList <- xpathSApply(myDoc, "//zipcode", xmlValue)
myList
myZip <- subset(myList, "21231")
myZip <- myList$"21231"
myZip <- myList[c("21231")]
myZip
myZip <- myList[c(21231)]
myZip
myZip <- myList[c("21231")]
myZip
myList
class(myList)
myZip <- myList[c(""21231")]
myZip <- myList[c(""21231""")]
myZip <- myList[c(""21231"")]
myZip <- myList[c("21231")]
myZip <- myList[c("21214")]
myZip
myList
myZipCode <- c("21231")
class(myZipCode)
class(myList)
myResult <- intersect(myZipCode, myList)
myResult
?intersect
length(myList)
myResult <- grep("21231", myList)
myResult
length(myresult)
length(myResult)
rm(list=ls())
ls()
?fread
??fread
install.packages("data.table")
library(data.table)
DT <- fread("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
source('~/R/PA1/fReadScript.R')
ptm <- proc.time()
mean(DT$pwgtp15,by=DT$SEX)
proc.time() - ptm
ptm <- proc.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
proc.time() - ptm
ptm <- proc.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
proc.time() - ptm
ptm <- proc.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
proc.time() - ptm
ptm <- proc.time()
DT[,mean(pwgtp15),by=SEX]
proc.time() - ptm
ptm <- proc.time()
tapply(DT$pwgtp15,DT$SEX,mean)
proc.time() - ptm
system.time()
source('~/R/PA1/fReadScript.R')
system.time(mean(DT$pwgtp15,by=DT$SEX))
DT
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
install.packages("xlsx")
library(xlsx)
install.packages("rjava")
install.packages("rJava")
library(xlsx)
library(rJava)
install.packages("rJava")
library(rJava)
system("java -version")
system("JAVA_HOME")
library(xlsx)
library(rJava)
library(rJava)
library(xlsx)
q()
library(rJava)
library(rJava)
library(rJava)
library(rJava)
setwd("c:/Users/Documents/getdata-data-DATA.gov_NGAP.csv")
setwd("c:/Users/IbisamJawad/Documents/")
setwd("C:/Users/IbisamJawad/Documents/")
setwd("C:/Users/IbtisamJawad/Documents/")
myData <- read.csv("getdata-data-DATA.gov_NGAP.csv")
head(myData)
myData <- read.csv(file="getdata-data-DATA.gov_NGAP.csv")[, 7:15]
head(myData)
myData <- read.csv(file="getdata-data-DATA.gov_NGAP.csv", sep= " ")[, 7:15]
myData <- read.csv(file="getdata-data-DATA.gov_NGAP.csv", sep= "")[, 7:15]
myData <- read.csv(file="getdata-data-DATA.gov_NGAP.csv")[, 7:15]
head(myData)
myCsv <- read.csv("myDataFile.csv")
head(myCsv)
sum(myCsv$Zip*myCsv$Ext,na.rm=T)
DT <- fread("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
library(data.table)
DT <- fread("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
head(DT)
t1 <- system.time(); mean(DT$pwgtp15,by=DT$SEX); t2 <- system.time()
difftime(t2, t1)
t1 <- system.time(); mean(DT$pwgtp15,by=DT$SEX); t2 <- system.time();
t1 <- Sys.time(); mean(DT$pwgtp15,by=DT$SEX); t2 <- Sys.time()
difftime(t2, t1)
t1 <- Sys.time(); mean(DT$pwgtp15,by=DT$SEX); t2 <- Sys.time();
print(t1)
print(t2)
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2];)
Sys.time()->start;
mean(DT$pwgtp15,by=DT$SEX);
print(Sys.time()-start);
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2];
rowMeans(DT)[DT$SEX==1];
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
Sys.time()->start;
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
print(Sys.time()-start);
sapply(split(DT$pwgtp15,DT$SEX),mean)
Sys.time()->start;
sapply(split(DT$pwgtp15,DT$SEX),mean)
print(Sys.time()-start);
DT[,mean(pwgtp15),by=SEX]
Sys.time()->start;
DT[,mean(pwgtp15),by=SEX]
print(Sys.time()-start);
tapply(DT$pwgtp15,DT$SEX,mean)
Sys.time()->start;
tapply(DT$pwgtp15,DT$SEX,mean)
print(Sys.time()-start);
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1];
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
source('~/timingCode.R')
# write the file url and file destination to an object
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
file.dest <- 'ACS2.csv'
# download from the URL
download.file(file.url, file.dest, method='curl' )
# load the data.table package
library(data.table)
# read the data
DT <- fread('ACS2.csv')
# time the processes
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]);
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2];)
time_DT <- system.time(for (i in 1:1000) DT[,mean(pwgtp15),by=SEX])
time_DT
time_sapply <- system.time(for (i in 1:1000) sapply(split(DT$pwgtp15,DT$SEX),mean))
time_sapply
time_tapply <- system.time(for (i in 1:1000) tapply(DT$pwgtp15,DT$SEX,mean))
time_tapply
time_mean1 <-system.time(for (i in 1:1000) mean(DT[DT$SEX==1,]$pwgtp15))
time_mean1
time_mean2 <-system.time(for (i in 1:1000) mean(DT[DT$SEX==2,]$pwgtp15))
time_mean2
time_mean <- time_mean1 + time_mean2
time_mean
time_mean3 <-system.time(for (i in 1:1000) mean(DT$pwgtp15,by=DT$SEX))
time_mean3
mean(DT$pwgtp15,by=DT$SEX)
DT[,mean(pwgtp15),by=SEX]
pa <- read.csv("activity.csv", header = TRUE)
setwd("./RepData_PeerAssessment1")
pa <- read.csv("activity.csv", header = TRUE)
View(pa)
class(head(pa))
class(head(pa$steps))
class(head(pa$date))
class(head(pa$interval))
require(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
?aggregate
pa1 <- na.rm(pa)
?na.omit
pa1 <- na.omit(pa)
View(pa1)
pa_complete <- pa[complete.cases(pa),]
View(pa_complete)
pa_complete <- pa[complete.cases(pa), !names(row.names)]
steps_per_day <- aggregate(steps~date, data=pa_complete, FUN=sum)
View(steps_per_day)
?hist
h1 <- hist(pa_complete$steps, breaks=pa_complete$date)
h1 <- hist(pa_complete$steps~pa_complete$date)
plot(h1)
h1 <- hist(pa_complete$steps)
plot(h1)
h2 <- hist(steps_per_day$steps)
plot(h2)
h1 <- hist(pa_complete$steps)
plot(h1)
h2 <- hist(steps_per_day$steps)
plot(h2)
h1 <- hist(pa_complete$steps)
plot(h1)
h2 <- hist(steps_per_day$steps)
plot(h2)
h1 <- hist(pa_complete$steps)
plot(h1)
h2 <- hist(steps_per_day$steps)
plot(h2)
hs <- hist(steps_per_day$steps)
plot(hs)
?hist
install.packages("ggplot2")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..)) +
scale_fill_gradient("Count", low = "green", high = "red")
library(ggplot2)
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..)) +
scale_fill_gradient("frequency", low = "green", high = "red")
hs <- hist(steps_per_day$steps)
plot(hs)
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..frequency..)) +
scale_fill_gradient("frequency", low = "green", high = "red")
?geom_histogram
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..)) +
scale_fill_gradient("count", low = "green", high = "red")
hs <- hist(steps_per_day$steps)
plot(hs)
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..)) +
scale_fill_gradient("count", low = "green", high = "red")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..)) +
scale_fill_gradient("count", low = "ping", high = "blue")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..)) +
scale_fill_gradient("count", low = "pink", high = "blue")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..)) +
scale_fill_gradient("count", low = "red", high = "blue")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..), binwidth=1000) +
scale_fill_gradient("count", low = "red", high = "blue")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "red", high = "blue")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "lightblue", high = "blue")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="red",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "lightblue", high = "darkblue")
ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="grey",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "lightblue", high = "darkblue")
ghist <- ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="grey",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "lightblue", high = "darkblue")
plot(ghist)
ghist <- ggplot(data=steps_per_day, aes(steps_per_day$steps)) +
geom_histogram(col="white",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "lightblue", high = "darkblue")
plot(ghist)
mean_steps_per_day <- mean(steps_per_day$steps)
mean_steps_per_day
median_steps_per_day <- median(steps_per_day$steps)
median_steps_per_day
ghist <- ggplot(data=steps_per_day, aes(steps)) +
geom_histogram(col="white",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "lightblue", high = "darkblue")
plot(ghist)
ghist <- ggplot(data=steps_per_day, aes(steps)) +
geom_histogram(col="red",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "lightblue", high = "darkblue")
plot(ghist)
gplot <- ggplot(data=pa_complete, aes(x=interval, y=steps)) + geom_line()
plot(gplot)
gplot <- ggplot(data=pa_complete, aes(x=interval, y=steps)) +
geom_line(aes(color="blue"))
plot(gplot)
gplot <- ggplot(data=pa_complete, aes(x=interval, y=steps)) +
geom_line(aes(color="steps"))
plot(gplot)
gplot <- ggplot(data=pa_complete, aes(x=interval, y=steps)) +
geom_line(aes(color=steps))
plot(gplot)
with(pa_complete, plot(x=interval, y=steps, type="l"))
plot(gplot)
with(pa_complete, plot(x=interval, y=steps, type="l"))
mean_steps_per_interval <- aggregate(steps~interval, data=pa_complete, FUN=mean)
mean_steps_per_interval
View(mean_steps_per_interval)
gplot <- ggplot(data=mean_steps_per_interval, aes(x=interval, y=steps)) +
geom_line(aes(color=steps))
plot(gplot)
max_average_steps <- max(mean_steps_per_interval$steps)
print(max_average_Steps)
print(max_average_steps)
max_average_steps_interval <- mean_steps_per_interval[which.max(mean_steps_per_interval$steps), mean_steps_per_interval$interval]
max_average_steps_interval <- mean_steps_per_interval[which.max(mean_steps_per_interval$steps), ]
print(max_average_steps_interval)
print(max_average_steps_interval$interval)
max_average_steps_interval <- mean_steps_per_interval[which.max(mean_steps_per_interval$steps), 1]
print(max_average_steps_interval$interval)
print(max_average_steps_interval)
max_average_steps_interval <- mean_steps_per_interval[which.max(mean_steps_per_interval$steps), c("interval")]
print(max_average_steps_interval)
max_average_steps_interval <- mean_steps_per_interval[which.max(mean_steps_per_interval$steps), "interval"]
print(max_average_steps_interval)
max_average_steps_interval <- mean_steps_per_interval[which.max(mean_steps_per_interval$steps), "steps"]
print(max_average_steps_interval)
missing_values <- length(!complete.cases(pa))
missing_values
missing_values <- length(complete.cases(pa))
missing_values
complete.cases(pa)
!complete.cases(pa)
sum(complete.cases(pa))
sum(!complete.cases(pa))
mv <- nrow(pa[!complete.cases(pa),])
print(mv)
missing_values <- nrow(pa[!complete.cases(pa),])
print(missing_values)
?merge
md <- merge(steps_per_day, pa_incomplete, by.x=date, by.y=date)
pa_incomplete <- pa[!complete.cases(pa),]
View(pa_incomplete)
md <- merge(steps_per_day, pa_incomplete, by.x=date, by.y=date)
md <- merge(steps_per_day, pa_incomplete, by.x=date)
class(pa_incomplete)
class(steps_per_day)
md <- merge(steps_per_day, pa_incomplete, by.x="date")
md <- merge(steps_per_day, pa_incomplete, by.x="date", all.x=TRUE)
md <- merge(steps_per_day, pa_incomplete, by.x="date", by.y="date", all.x=TRUE)
View(md)
md <- merge(pa_incomplete, steps_per_day, by.x="date", by.y="date", all.x=TRUE)
View(md)
md <- merge(pa_incomplete, steps_per_day, by.x="date", by.y="date", all=TRUE)
View(md)
md <- merge(pa_incomplete, mean_steps_per_interval, by.x="interval", by.y="interval", all=TRUE)
View(md)
pa_complete$row.names <- null
pa_complete$row.names <- NULL
View(pa_complete)
pa_complete$"row.names" <- NULL
View(pa_complete)
pa_complete[pa_complete, c("steps", "date", "interval")]
pan <- pa_complete[pa_complete, c("steps", "date", "interval")]
pan <- pa_complete[pa_complete, c("steps")]
pan <- pa_complete[pa_complete, "steps"]
pa_complete[, c("steps", "date", "interval")]
pa_complete <- pa_complete[, c("steps", "date", "interval")]
View(pa_complete)
rownames(pa_complete) <- NULL
View(pa_complete)
md <- merge(pa_incomplete, mean_steps_per_interval, by.x="interval", by.y="interval", all=TRUE)
md[, c("steps.y", "date", "interval")]
colnames(md) <- c("steps", "date", "interval")
View(md)
md <- merge(pa_incomplete, mean_steps_per_interval, by.x="interval", by.y="interval", all=TRUE)
md <- md[, c("steps.y", "date", "interval")]
colnames(md) <- c("steps", "date", "interval")
View(md)
install.packages("data.table")
library(data.table)
mdt <- data.table(md, key=c("date", "interval"))
?data.table
md <- data.table(md, key=c("date", "interval"))
pa_complete <- data.table(pa.complete, key=c("date", "interval"))
pa_complete <- data.table(pa_complete, key=c("date", "interval"))
View(pa_complete)
?merge
?join
?rbind
l <- list(pa_complete, md)
pa_full <- rbindlist(l)
View(pa_full)
pa_full <- pa_full[order(date, interval),]
View(pa_full)
steps_per_day_full <- aggregate(steps~date, data=pa_full, FUN=sum)
View(steps_per_day_full)
ghist_full <- ggplot(data=steps_per_day, aes(steps)) +
geom_histogram(col="white",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "lightblue", high = "darkblue")
plot(ghist_full)
plot(ghist)
plot(ghist_full)
ghist_full <- ggplot(data=steps_per_day_full, aes(steps)) +
geom_histogram(col="white",
aes(fill=..count..), binwidth=2500) +
scale_fill_gradient("count", low = "lightblue", high = "darkblue")
plot(ghist_full)
mean_steps_per_day_full <- mean(steps_per_day_full$steps)
print(mean_steps_per_day_full)
median_steps_per_day_full <- median(steps_per_day_full$steps)
print(median_steps_per_day_full)
?median
mean_steps_per_day_full <- mean(steps_per_day_full$steps)
print(mean_steps_per_day_full)
median_steps_per_day_full <- median(steps_per_day_full$steps)
print(median_steps_per_day)
mean_steps_per_day_full <- mean(steps_per_day_full$steps)
print(mean_steps_per_day)
median_steps_per_day_full <- median(steps_per_day_full$steps)
print(median_steps_per_day)
